{"version":3,"sources":["../../source/library/database.js"],"names":["EventEmitter","Is","MongoDB","MongoClient","Database","constructor","url","name","_url","_name","_client","_database","_count","open","client","connect","database","db","existsCollectionMigration","existsCollection","createCollectionMigration","createCollection","dropCollectionMigration","dropCollection","existsIndexMigrationUnique","existsIndex","createIndexMigrationUnique","collection","createIndex","dropIndexMigrationUnique","dropIndex","existsIndexMigrationFind","createIndexMigrationFind","dropIndexMigrationFind","isMigrationInstalled","migration","findOne","not","null","installed","uninstalled","installMigration","findOneAndReplace","Date","uninstallMigration","findOneAndUpdate","cursor","listCollections","data","toArray","filter","length","collectionName","indexName","listIndexes","index","close"],"mappings":"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","sourcesContent":["import EventEmitter from 'events'\nimport Is from '@pwn/is'\nimport MongoDB from 'mongodb'\n\nconst { MongoClient } = MongoDB\n\nclass Database extends EventEmitter {\n\n  constructor(url, name) {\n    super()\n\n    this._url = url\n    this._name = name\n\n    this._client = null\n    this._database = null\n    this._count = 0\n\n  }\n\n  /* c8 ignore next 3 */\n  get url() {\n    return this._url\n  }\n\n  /* c8 ignore next 3 */\n  get name() {\n    return this._name\n  }\n\n  async open() {\n\n    if (this._count === 0) {\n        \n      let client = await MongoClient.connect(this._url, { 'useUnifiedTopology': true })\n      let database = await client.db(this._name)\n\n      this._client = client\n      this._database = database\n\n    }\n\n    this._count++\n\n  }\n\n  existsCollectionMigration() {\n    return this.existsCollection('migration')\n  }\n\n  createCollectionMigration() {\n    return this._database.createCollection('migration')\n  }\n\n  dropCollectionMigration() {\n    return this._database.dropCollection('migration')\n  }\n\n  existsIndexMigrationUnique() {\n    return this.existsIndex('migration', 'migrationIndexUnique')\n  }\n\n  createIndexMigrationUnique() {\n    return this._database.collection('migration').createIndex({ 'name': 1 }, { 'name': 'migrationIndexUnique', 'unique': true })\n  }\n\n  dropIndexMigrationUnique() {\n    return this._database.collection('migration').dropIndex('migrationIndexUnique')\n  }\n\n  existsIndexMigrationFind() {\n    return this.existsIndex('migration', 'migrationIndexFind')\n  }\n\n  createIndexMigrationFind() {\n    return this._database.collection('migration').createIndex({ 'name': 1, 'installed': 1, 'uninstalled': 1 }, { 'name': 'migrationIndexFind' })\n  }\n\n  dropIndexMigrationFind() {\n    return this._database.collection('migration').dropIndex('migrationIndexFind')\n  }\n\n  async isMigrationInstalled(name) {\n\n    let migration = await this._database.collection('migration').findOne({ 'name': name }) //, 'installed': { $ne: null }, 'uninstalled': null })\n\n    return Is.not.null(migration) && Is.not.null(migration.installed) && Is.null(migration.uninstalled) // Is.null(data) ? false : true\n\n  }\n\n  installMigration(name) { \n    // findOneAndReplace because a record may not exist\n    return this._database.collection('migration').findOneAndReplace(\n      { 'name': name }, \n      { 'name': name, 'installed': new Date(), 'uninstalled': null }, \n      { 'upsert': true })\n  }\n\n  uninstallMigration(name) {\n    return this._database.collection('migration').findOneAndUpdate(\n      { 'name': name }, // 'installed': { $ne: null }, 'uninstalled': null }, \n      { '$set': { 'uninstalled': new Date() } })\n  }\n\n  async existsCollection(name) {\n\n    let cursor = this._database.listCollections()\n\n    let data = null\n    data = await cursor.toArray()\n    data = data.filter((collection) => collection.name === name)\n\n    return data.length > 0 ? true : false\n\n  }\n\n  async existsIndex(collectionName, indexName) {\n\n    if (await this.existsCollection(collectionName)) {\n\n      let collection = this._database.collection(collectionName)\n      let cursor = collection.listIndexes()\n  \n      let data = null\n      data = await cursor.toArray()\n      data = data.filter((index) => index.name === indexName)\n  \n      return data.length > 0 ? true : false\n\n    } else { \n      return false \n    }\n\n  }\n\n  async close() {\n\n    if (this._count === 1) {\n\n      await this._client.close()\n\n      this._database = null\n      this._client = null\n\n    }\n\n    this._count--\n\n  }\n\n}\n\nexport { Database }\n"],"file":"database.js"}