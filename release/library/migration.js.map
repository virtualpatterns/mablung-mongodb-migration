{"version":3,"sources":["../../source/library/migration.js"],"names":["Migration","BaseMigration","Path","Database","FilePath","_URL","fileURLToPath","import","meta","url","FolderPath","dirname","constructor","path","database","_database","isInstalled","open","existsCollectionMigration","isMigrationInstalled","_name","close","install","installMigration","uninstall","uninstallMigration","createMigration","name","normalize","templatePath","getMigration","parameter","Promise","all","getMigrationFromPath","flat","sort","includePattern","excludePattern"],"mappings":"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","sourcesContent":["import { Migration as BaseMigration } from '@virtualpatterns/mablung-migration'\nimport Path from 'path'\n\nimport { Database } from './database.js'\n\nconst FilePath = __filePath\nconst FolderPath = Path.dirname(FilePath)\n\nclass Migration extends BaseMigration {\n\n  constructor(path, database) {\n    super(path)\n    this._database = database\n  }\n\n  /* c8 ignore next 3 */\n  get database() {\n    return this._database\n  }\n\n  async isInstalled() {\n\n    await this._database.open()\n\n    try {\n      return  (await this._database.existsCollectionMigration()) &&\n              (await this._database.isMigrationInstalled(this._name))\n    } finally {\n      await this._database.close()\n    }\n\n  }\n\n  install() {\n    return this._database.installMigration(this._name)\n  }\n\n  uninstall() {\n    return this._database.uninstallMigration(this._name)\n  }\n\n  static createMigration(name, path = Path.normalize(`${FolderPath}/../../source/library/migration`), templatePath = Path.normalize(`${FolderPath}/../../source/library/migration/template.js`)) {\n    return super.createMigration(name, path, templatePath)\n  }\n\n  static async getMigration(...parameter) { // parameter is [ database ] or [ url, name ]\n\n    let [ database ] = parameter\n    let [ url, name ] = parameter\n\n    if (database instanceof Database) {\n      ({ url, name } = database)\n    } else {\n      database = new Database(url, name)\n    }\n\n    return (await Promise.all([ super.getMigration(), this.getMigrationFromPath(`${FolderPath}/migration`, [ '*.js' ], [ 'template.js' ], database) ])).flat().sort()\n  \n  }\n\n  static getMigrationFromPath(path, includePattern, excludePattern, ...parameter) { // parameter is [ database ] or [ url, name ]\n\n    let [ database ] = parameter\n    let [ url, name ] = parameter\n\n    if (database instanceof Database) {\n      ({ url, name } = database)\n    } else {\n      database = new Database(url, name)\n    }\n\n    return super.getMigrationFromPath(path, includePattern, excludePattern, database)\n\n  }\n\n  static async installMigration(...parameter) { // parameter is [ database ] or [ url, name ]\n\n    let [ database ] = parameter\n    let [ url, name ] = parameter\n\n    if (database instanceof Database) {\n      ({ url, name } = database)\n    } else {\n      database = new Database(url, name)\n    }\n\n    await database.open()\n\n    try {\n      await super.installMigration(database)\n    } finally {\n      await database.close()\n    }\n\n  }\n\n  static async uninstallMigration(...parameter) { // parameter is [ database ] or [ url, name ]\n  \n    let [ database ] = parameter\n    let [ url, name ] = parameter\n\n    if (database instanceof Database) {\n      ({ url, name } = database)\n    } else {\n      database = new Database(url, name)\n    }\n\n    await database.open()\n\n    try {\n      await super.uninstallMigration(database)\n    } finally {\n      await database.close()\n    }\n\n  }\n\n}\n\nexport { Migration }\n"],"file":"migration.js"}