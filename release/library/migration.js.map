{"version":3,"sources":["../../source/library/migration.js"],"names":[],"mappings":"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","file":"migration.js","sourcesContent":["import { CreateMigration, Migration as BaseMigration } from '@virtualpatterns/mablung-migration'\nimport FileSystem from 'fs-extra'\nimport Is from '@pwn/is'\nimport Path from 'path'\n\nimport { Database } from './database.js'\n\nconst FilePath = __filePath\nconst FolderPath = Path.dirname(FilePath)\nconst Require = __require\n\nclass Migration extends CreateMigration(BaseMigration, Path.normalize(`${FolderPath}/../../source/library/migration`), Path.normalize(`${FolderPath}/../../source/library/migration/template.js`), `${FolderPath}/migration`) {\n\n  constructor(path, database) {\n    super(Is.string(path) ? path : FilePath)\n    this.database = Is.string(path) ? database : path\n  }\n\n  async isInstalled() {\n\n    let isInstalled = null\n\n    await this.database.open()\n\n    try {\n      isInstalled = await this.database.isMigrationInstalled(this.name)\n    } finally {\n      await this.database.close()\n    }\n\n    return isInstalled\n\n  }\n\n  install() {\n    return this.database.installMigration(this.name)\n  }\n\n  uninstall() {\n    return this.database.uninstallMigration(this.name)\n  }\n\n  static createDatabase(...argument) { // argument is [ name, path ]\n    return new Database(...this.getDatabaseConfiguration(...argument))\n  }\n\n  static getDatabaseConfiguration(name = 'default', path = Require.resolve('./database.json')) {\n\n    let configuration = FileSystem.readJsonSync(path, { 'encoding': 'utf-8' })\n    let url = configuration[name].url\n    let option = configuration[name]?.option || {}\n\n    return [ url, option ]\n\n  }\n\n  static getRawMigration(includeFrom, includeTo, ...argument) { // argument is [ database ] or [ name, path ]\n    return super.getRawMigration(includeFrom, includeTo, (argument[0] instanceof Database) ? argument[0] : this.createDatabase(...argument))\n  }\n\n  static async installMigration(includeFrom, includeTo, ...argument) { // argument is [ database ] or [ name, path ]\n\n    let database = (argument[0] instanceof Database) ? argument[0] : this.createDatabase(...argument)\n\n    await database.open()\n\n    try {\n      await super.installMigration(includeFrom, includeTo, database)\n    } finally {\n      await database.close()\n    }\n\n  }\n\n  static async uninstallMigration(includeFrom, includeTo, ...argument) { // argument is [ database ] or [ name, path ]\n  \n    let database = (argument[0] instanceof Database) ? argument[0] : this.createDatabase(...argument)\n\n    await database.open()\n\n    try {\n      await super.uninstallMigration(includeFrom, includeTo, database)\n    } finally {\n      await database.close()\n    }\n\n  }\n\n}\n\nexport { Migration }\n"]}