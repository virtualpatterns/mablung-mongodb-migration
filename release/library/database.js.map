{"version":3,"sources":["../../source/library/database.js"],"names":[],"mappings":"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","file":"database.js","sourcesContent":["import { Configuration } from '@virtualpatterns/mablung-configuration'\nimport { MongoClient } from 'mongodb'\nimport Is from '@pwn/is'\n\nclass Database {\n\n  constructor(userUrl, userOption = {}) {\n\n    this.databaseUrl = userUrl\n    this.databaseOption = Configuration.getOption(this.defaultOption, userOption)\n\n    this.client = null\n    this.database = null\n    this.count = 0\n\n  }\n\n  get defaultOption() {\n    return {}\n  }\n\n  async open() {\n\n    if (Is.equal(this.count, 0)) {\n\n      let client = await MongoClient.connect(this.databaseUrl, this.databaseOption)\n      let database = await client.db()\n\n      this.client = client\n      this.database = database\n\n    }\n\n    return ++this.count\n\n  }\n\n  drop() {\n    return this.database.dropDatabase()\n  }\n\n  async close() {\n\n    if (Is.equal(this.count, 1)) {\n\n      await this.client.close()\n\n      // this.database = null\n      // this.client = null\n\n    }\n\n    return --this.count\n\n  }\n\n  async existsCollection(name) {\n\n    let cursor = this.database.listCollections({ 'name': name })\n    let data = await cursor.toArray()\n\n    return data.length > 0 ? true : false\n\n  }\n\n  async existsIndex(collectionName, indexName) {\n\n    if (await this.existsCollection(collectionName)) {\n\n      let collection = this.database.collection(collectionName)\n\n      return collection.indexExists(indexName)\n\n    } else {\n      return false\n    }\n\n  }\n\n  async isMigrationInstalled(name) {\n\n    let migration = await this.database\n      .collection('migration')\n      .findOne(\n        {\n          'name': name,\n          'installed': { '$gt': 0 }\n        },\n        {\n          'hint': {\n            'name': 1,\n            'installed': 1\n          },\n          'project': {}\n        }\n      )\n\n    return Is.not.null(migration)\n\n  }\n\n  installMigration(name) {\n\n    return this.database\n      .collection('migration')\n      .updateOne(\n        { 'name': name },\n        {\n          '$inc': { 'installed': 1 },\n          '$push': {\n            'history': {\n              'installed': new Date(),\n              'uninstalled': null\n            }\n          },\n          '$set': { 'updated': new Date() },\n          '$setOnInsert': {\n            'name': name,\n            'created': new Date()\n          }\n        },\n        {\n          'hint': { 'name': 1 },\n          'upsert': true\n        }\n      )\n    \n  }\n\n  async uninstallMigration(name) {\n\n    let migration = await this.database\n      .collection('migration')\n      .findOne({ 'name': name })\n    \n    if (Is.not.null(migration)) {\n\n      let history = null\n      history = migration.history\n        .map((history, index) => ({ index, 'uninstalled': history.uninstalled }))\n        .filter((history) => Is.null(history.uninstalled))\n        .reverse()\n\n      history = history[0]\n\n      if (Is.not.nil(history)) {\n\n        return this.database\n          .collection('migration')\n          .updateOne(\n            { 'name': name },\n            {\n              '$inc': { 'installed': -1 },\n              '$set': {\n                'updated': new Date(),\n                [`history.${history.index}.uninstalled`]: new Date()\n              }\n            }\n          )\n\n      }\n\n    }\n    \n  }\n\n}\n\n[\n  'createCollection',\n  'dropCollection',\n  'collection'\n].forEach((methodName) => {\n  Database.prototype[methodName] = function (...argument) {\n    return this.database[methodName](...argument)\n  }\n})\n\nexport { Database }\n"]}