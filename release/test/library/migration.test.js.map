{"version":3,"sources":["../../../source/test/library/migration.test.js"],"names":[],"mappings":"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","file":"migration.test.js","sourcesContent":["import { CreateLoggedDatabase, CreateLoggedMigration } from '@virtualpatterns/mablung-mongodb-migration/test'\nimport { Database, Migration } from '@virtualpatterns/mablung-mongodb-migration'\nimport FileSystem from 'fs-extra'\nimport Path from 'path'\nimport Sinon from 'sinon'\n\nimport Test from 'ava'\n\nimport { Migration as CreateCollectionMigration } from '../../library/migration/1638502987605-create-collection-migration.js'\nimport { Migration as CreateIndexMigrationByName } from '../../library/migration/1638503015379-create-index-migration-by-name.js'\nimport { Migration as CreateIndexMigrationByNameInstalled } from '../../library/migration/1638503040026-create-index-migration-by-name-installed.js'\n\nconst FilePath = __filePath\nconst FolderPath = Path.dirname(FilePath)\nconst Process = process\nconst Require = __require\n\nconst LogPath = FilePath.replace('/release/', '/data/').replace('.test.js', '.log')\nconst LoggedDatabase = CreateLoggedDatabase(Database, LogPath)\nconst LoggedMigration = CreateLoggedMigration(Migration, LoggedDatabase)\nconst LoggedCreateCollectionMigration = CreateLoggedMigration(CreateCollectionMigration, LoggedDatabase)\nconst LoggedCreateIndexMigrationByName = CreateLoggedMigration(CreateIndexMigrationByName, LoggedDatabase)\nconst LoggedCreateIndexMigrationByNameInstalled = CreateLoggedMigration(CreateIndexMigrationByNameInstalled, LoggedDatabase)\n\nconst ConfigurationPath = Require.resolve('./database.json')\nconst ConfigurationName = FilePath.replace(`${Process.cwd()}/release/`, '')\n\nTest.before(async () => {\n  await FileSystem.ensureDir(Path.dirname(LogPath))\n  return FileSystem.remove(LogPath)\n})\n\nTest.beforeEach(async () => {\n\n  let database = Migration.createDatabase(ConfigurationName, ConfigurationPath) // new Database(ConfigurationName, ConfigurationPath)\n\n  await database.open()\n\n  try {\n    await database.drop()\n  } finally {\n    await database.close()\n  }\n\n})\n\nTest.serial('Migration(...)', (test) => {\n  test.notThrows(() => { new LoggedCreateCollectionMigration(LoggedMigration.createDatabase(ConfigurationName, ConfigurationPath)) })\n})\n\nTest.serial('isInstalled() returns false when not installed', async (test) => {\n\n  let database = LoggedMigration.createDatabase(ConfigurationName, ConfigurationPath)\n\n  await database.open()\n\n  try {\n\n    await (new LoggedCreateCollectionMigration(database)).install()\n    await (new LoggedCreateIndexMigrationByName(database)).install()\n    await (new LoggedCreateIndexMigrationByNameInstalled(database)).install()\n\n    test.is(await (new LoggedMigration(Path.normalize(`${FolderPath}/../../library/migration/does-not-exist.js`), database)).isInstalled(), false)\n\n  } finally {\n    await database.close()\n  }\n\n})\n\nTest.serial('isInstalled() returns true when installed', async (test) => {\n\n  let database = LoggedMigration.createDatabase(ConfigurationName, ConfigurationPath)\n\n  await database.open()\n\n  try {\n\n    await (new LoggedCreateCollectionMigration(database)).install()\n    await (new LoggedCreateIndexMigrationByName(database)).install()\n    await (new LoggedCreateIndexMigrationByNameInstalled(database)).install()\n\n    let migration = new LoggedMigration(Path.normalize(`${FolderPath}/../../library/migration/does-not-exist.js`), database)\n\n    await migration.install()\n\n    test.is(await migration.isInstalled(), true)\n\n  } finally {\n    await database.close()\n  }\n\n})\n\nTest.serial('isInstalled() returns false when uninstalled', async (test) => {\n\n  let database = LoggedMigration.createDatabase(ConfigurationName, ConfigurationPath)\n\n  await database.open()\n\n  try {\n\n    await (new LoggedCreateCollectionMigration(database)).install()\n    await (new LoggedCreateIndexMigrationByName(database)).install()\n    await (new LoggedCreateIndexMigrationByNameInstalled(database)).install()\n\n    let migration = new LoggedMigration(Path.normalize(`${FolderPath}/../../library/migration/does-not-exist.js`), database)\n\n    await migration.install()\n    await migration.uninstall()\n\n    test.is(await migration.isInstalled(), false)\n\n  } finally {\n    await database.close()\n  }\n\n})\n\nTest.serial('isInstalled() throws Error', async (test) => {\n\n  let database = LoggedMigration.createDatabase(ConfigurationName, ConfigurationPath)\n\n  let isMigrationInstalledStub = Sinon\n    .stub(database, 'isMigrationInstalled')\n    .rejects(new Error())\n  \n  try {\n\n    await database.open()\n\n    try {\n\n      await (new LoggedCreateCollectionMigration(database)).install()\n      await (new LoggedCreateIndexMigrationByName(database)).install()\n      await (new LoggedCreateIndexMigrationByNameInstalled(database)).install()\n\n      await test.throwsAsync((new LoggedMigration(Path.normalize(`${FolderPath}/../../library/migration/does-not-exist.js`), database)).isInstalled(), { 'instanceOf': Error })\n\n    } finally {\n      await database.close()\n    }\n\n  } finally {\n    isMigrationInstalledStub.restore()\n  }\n\n})\n\nTest.serial('install()', async (test) => {\n\n  let database = LoggedMigration.createDatabase(ConfigurationName, ConfigurationPath)\n\n  await database.open()\n\n  try {\n\n    await (new LoggedCreateCollectionMigration(database)).install()\n    await (new LoggedCreateIndexMigrationByName(database)).install()\n    await (new LoggedCreateIndexMigrationByNameInstalled(database)).install()\n\n    let migration = new LoggedMigration(Path.normalize(`${FolderPath}/../../library/migration/does-not-exist.js`), database)\n\n    await test.notThrowsAsync(migration.install())\n\n  } finally {\n    await database.close()\n  }\n\n})\n\nTest.serial('uninstall()', async (test) => {\n\n  let database = LoggedMigration.createDatabase(ConfigurationName, ConfigurationPath)\n\n  await database.open()\n\n  try {\n\n    await (new LoggedCreateCollectionMigration(database)).install()\n    await (new LoggedCreateIndexMigrationByName(database)).install()\n    await (new LoggedCreateIndexMigrationByNameInstalled(database)).install()\n\n    let migration = new LoggedMigration(Path.normalize(`${FolderPath}/../../library/migration/does-not-exist.js`), database)\n\n    await test.notThrowsAsync(migration.install())\n    await test.notThrowsAsync(migration.uninstall())\n\n  } finally {\n    await database.close()\n  }\n\n})\n\nTest.serial('getMigration(undefined, undefined, \\'...\\', \\'...\\')', async (test) => {\n\n  let migration = await LoggedMigration.getMigration(undefined, undefined, ConfigurationName, ConfigurationPath)\n\n  test.is(migration.length, 3)\n  test.is(migration[0].name, '1638502987605-create-collection-migration')\n  test.is(await migration[0].isInstalled(), false)\n  test.is(migration[1].name, '1638503015379-create-index-migration-by-name')\n  test.is(await migration[1].isInstalled(), false)\n  test.is(migration[2].name, '1638503040026-create-index-migration-by-name-installed')\n  test.is(await migration[2].isInstalled(), false)\n\n})\n\nTest.serial('getMigration(undefined, undefined, ...)', async (test) => {\n\n  let database = LoggedMigration.createDatabase(ConfigurationName, ConfigurationPath)\n\n  await database.open()\n\n  try {\n\n    let migration = await LoggedMigration.getMigration(undefined, undefined, database)\n\n    test.is(migration.length, 3)\n    test.is(migration[0].name, '1638502987605-create-collection-migration')\n    test.is(await migration[0].isInstalled(), false)\n    test.is(migration[1].name, '1638503015379-create-index-migration-by-name')\n    test.is(await migration[1].isInstalled(), false)\n    test.is(migration[2].name, '1638503040026-create-index-migration-by-name-installed')\n    test.is(await migration[2].isInstalled(), false)\n\n  } finally {\n    await database.close()\n  }\n\n})\n\nTest.serial('installMigration(undefined, undefined, \\'...\\', \\'...\\')', async (test) => {\n\n  await LoggedMigration.installMigration(undefined, undefined, ConfigurationName, ConfigurationPath)\n\n  let migration = await LoggedMigration.getMigration(undefined, undefined, ConfigurationName, ConfigurationPath)\n\n  test.is(migration.length, 3)\n  test.is(migration[0].name, '1638502987605-create-collection-migration')\n  test.is(await migration[0].isInstalled(), true)\n  test.is(migration[1].name, '1638503015379-create-index-migration-by-name')\n  test.is(await migration[1].isInstalled(), true)\n  test.is(migration[2].name, '1638503040026-create-index-migration-by-name-installed')\n  test.is(await migration[2].isInstalled(), true)\n\n})\n\nTest.serial('installMigration(undefined, undefined, ...)', async (test) => {\n\n  let database = LoggedMigration.createDatabase(ConfigurationName, ConfigurationPath)\n\n  await database.open()\n\n  try {\n\n    await LoggedMigration.installMigration(undefined, undefined, database)\n\n    let migration = await LoggedMigration.getMigration(undefined, undefined, database)\n\n    test.is(migration.length, 3)\n    test.is(migration[0].name, '1638502987605-create-collection-migration')\n    test.is(await migration[0].isInstalled(), true)\n    test.is(migration[1].name, '1638503015379-create-index-migration-by-name')\n    test.is(await migration[1].isInstalled(), true)\n    test.is(migration[2].name, '1638503040026-create-index-migration-by-name-installed')\n    test.is(await migration[2].isInstalled(), true)\n\n  } finally {\n    await database.close()\n  }\n\n})\n\nTest.serial('uninstallMigration(undefined, undefined, \\'...\\', \\'...\\')', async (test) => {\n\n  await LoggedMigration.installMigration(undefined, undefined, ConfigurationName, ConfigurationPath)\n  await LoggedMigration.uninstallMigration(undefined, undefined, ConfigurationName, ConfigurationPath)\n\n  let migration = await LoggedMigration.getMigration(undefined, undefined, ConfigurationName, ConfigurationPath)\n\n  test.is(migration.length, 3)\n  test.is(migration[0].name, '1638502987605-create-collection-migration')\n  test.is(await migration[0].isInstalled(), false)\n  test.is(migration[1].name, '1638503015379-create-index-migration-by-name')\n  test.is(await migration[1].isInstalled(), false)\n  test.is(migration[2].name, '1638503040026-create-index-migration-by-name-installed')\n  test.is(await migration[2].isInstalled(), false)\n\n})\n\nTest.serial('uninstallMigration(undefined, undefined, ...)', async (test) => {\n\n  let database = LoggedMigration.createDatabase(ConfigurationName, ConfigurationPath)\n\n  await database.open()\n\n  try {\n\n    await LoggedMigration.installMigration(undefined, undefined, database)\n    await LoggedMigration.uninstallMigration(undefined, undefined, database)\n\n    let migration = await LoggedMigration.getMigration(undefined, undefined, database)\n\n    test.is(migration.length, 3)\n    test.is(migration[0].name, '1638502987605-create-collection-migration')\n    test.is(await migration[0].isInstalled(), false)\n    test.is(migration[1].name, '1638503015379-create-index-migration-by-name')\n    test.is(await migration[1].isInstalled(), false)\n    test.is(migration[2].name, '1638503040026-create-index-migration-by-name-installed')\n    test.is(await migration[2].isInstalled(), false)\n\n  } finally {\n    await database.close()\n  }\n\n})\n"]}